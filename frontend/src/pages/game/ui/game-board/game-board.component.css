#game-board-component-container {
    grid-column: 2/3;
    display: grid;
    grid-template-columns: 20% 80%;
    grid-template-rows: 90vh 10vh;

    & #game-board-actions {
        grid-column: 1/3;
        grid-row: 2/3;
        display: flex;
        align-items: center;
        justify-content: flex-end;

        & .game-board-actions-button{
            width: 300px;
            height: 45px;
            margin: 0 20px 0 20px;
        }
    }

    & #game-board-cards-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-flow: column;

        & #game-board-trips-container, & #game-board-quads-container {
            display: flex;
            width: 60%;
            justify-content: space-around;

            @media (max-width: 1600px) {
                width: 80%;
            }
        }
    }

    & #game-board-maze-container {
        display: flex;
        flex-flow: column;
        align-items: center;
        justify-content: space-around;

        & .game-board-maze-container-item {
            transition: box-shadow 0.5s;
            box-shadow: 1px 1px 5px gray;
        }

        & .game-board-maze-container-item:hover {
            box-shadow: 5px 5px 5px gray;
        }

        & #game-board-discarded-cards-container, & #game-board-card-deck {
            width: 60%;
            height: max-content;
            position: relative;
        }

        & #game-board-discarded-cards-image {
            width: 100%;
        }

        & .discarded-cards-card {
            position: absolute;
            cursor: pointer;
            top: 50%;
            left: 48%;
            transform: translate(-50%, -48%);
        }
    }
}

.game-board-card {
    cursor: pointer;
}

.game-board-card:hover {
    border-radius: 15px;
    box-shadow: 5px 5px 5px gray;
    transition: box-shadow 0.5s;
}

.game-element-available {
    --d: 3000ms;
    --angle: 90deg;
    --gradX: 100%;
    --gradY: 50%;
    --c1: yellow;
    --c2: var(--secondary);
    cursor: pointer;
    border: 0.20rem solid;
    border-image: conic-gradient(from var(--angle), var(--c2), var(--c1) 0.1turn, var(--c1) 0.15turn, var(--c2) 0.25turn) 30;
    animation: borderRotate var(--d) linear infinite forwards;
}

@keyframes borderRotate {
    100% {
        --angle: 420deg;
    }
}

@keyframes borderRadial {
    20% {
        --gradX: 100%;
        --gradY: 50%;
    }
    40% {
        --gradX: 100%;
        --gradY: 100%;
    }
    60% {
        --gradX: 50%;
        --gradY: 100%;
    }
    80% {
        --gradX: 0%;
        --gradY: 50%;
    }
    100% {
        --gradX: 50%;
        --gradY: 0%;
    }
}

@property --angle {
    syntax: '<angle>';
    initial-value: 90deg;
    inherits: true;
}

@property --gradX {
    syntax: '<percentage>';
    initial-value: 50%;
    inherits: true;
}

@property --gradY {
    syntax: '<percentage>';
    initial-value: 0%;
    inherits: true;
}

@keyframes rotate {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}